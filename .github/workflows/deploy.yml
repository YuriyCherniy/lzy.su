name: Deploy by SSH
on: [workflow_dispatch, push]

jobs:
  check_django_deploy:
    runs-on: ubuntu-24.04
    environment:
      name: Production Environment
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set deploy variables
        env:
          SECRET_KEY: ${{ secrets.PRODUCTION_SECRET_KEY }}
          SECRET_ADMIN_URL: ${{ secrets.PRODUCTION_SECRET_ADMIN_URL }}
          DEBUG: False
          POSTGRES: True
          POSTGRES_DB: ${{ secrets.PRODUCTION_POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.PRODUCTION_POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PRODUCTION_POSTGRES_PASSWORD }}

        run: |
          {
            echo "SECRET_KEY=\"$SECRET_KEY\""
            echo "SECRET_ADMIN_URL=\"$SECRET_ADMIN_URL\""
            echo "DEBUG=\"$DEBUG\""
            echo "POSTGRES=\"$POSTGRES\""
            echo "POSTGRES_DB=\"$POSTGRES_DB\""
            echo "POSTGRES_USER=\"$POSTGRES_USER\""
            echo "POSTGRES_PASSWORD=\"$POSTGRES_PASSWORD\""
          } > .env
          
      - name: Check deploy environment
        run: |
          python3 -m pip install -r ./app/requirements/dev.txt
          echo "Running Django deployment checks..."
          
          OUTPUT=$(python3 ./app/manage.py check --deploy 2>&1 | grep -A 5 "WARNINGS:")
          
          if [ ! -z "$OUTPUT" ]; then
            echo "CRITICAL: Django deploy warnings detected:"
            echo "----------------------------------------"
            echo "$OUTPUT"
            echo "----------------------------------------"
            exit 1
          else
            echo "SUCCESS: No Django deployment warnings found"
          fi
        # shell: bash


  # deploy:
  #   needs: [check_django_deploy]
  #   runs-on: ubuntu-24.04
  #   steps:
  #     - name: Execute remote ssh commands using ssh key
  #       uses: appleboy/ssh-action@v1
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USER }}
  #         key: ${{ secrets.KEY }}
  #         port: ${{ secrets.PORT }}
  #         script: |
  #           cd ~/lzy.su
  #           git pull origin docker
  #           docker compose down
  #           docker compose up --build -d
